from pymongo import MongoClient
import pprint

connection_string = "mongodb+srv://masatest2:{password}@cluster0.wflhw.mongodb.net/sample_mflix?authSource=admin&retryWrites=true&w=majority"
client = MongoClient(connection_string)

db = client['sample_mflix']
collection = db['movies']

# EXERCISE 1

# Task 1: first movie with genre "Action"
action_movie = collection.find_one({"genres": "Action"})
pprint.pprint(action_movie)

# Task 2: all movies released after 2000 (first 5 results)
movies_after_2000 = collection.find({"year": {"$gt": 2000}}).limit(5)
for movie in movies_after_2000:
    pprint.pprint(movie)

# Task 3: IMDB rating higher than 8.5 (first 5 results)
high_rated_movies = collection.find({"imdb.rating": {"$gt": 8.5}}).limit(5)
for movie in high_rated_movies:
    print(movie)

# Task 4: genre both "Action" and "Adventure"
action_adventure_movies = collection.find({"genres": {"$all": ["Action", "Adventure"]}}).limit(5)
for movie in action_adventure_movies:
    print(movie)

# EXERCISE 2

# Task 1: "Comedy" movies sorted descending by IMDb rating (first 5 results)
sorted_comedy_movies = collection.find({"genres": "Comedy"}).sort("imdb.rating", -1).limit(5)
for movie in sorted_comedy_movies:
    print(movie)
    
# Task 2: "Drama" movies sorted ascending by release year (first 5 results)
sorted_drama_movies = collection.find({"genres": "Drama"}).sort("year", 1).limit(5)
for movie in sorted_drama_movies:
    print(movie)

# EXERCISE 3

# Task 1: average IMDb rating for each genre
avg_rating_by_genre = collection.aggregate([
    {"$unwind": "$genres"},
    {"$group": {"_id": "$genres", "avg_rating": {"$avg": "$imdb.rating"}}},
    {"$sort": {"avg_rating": -1}},
    {"$limit": 5}
])
for genre in avg_rating_by_genre:
    print(genre)
    
# Task 2: top 5 directors by average IMDb rating
top_directors = collection.aggregate([
    {"$group": {"_id": "$directors", "avg_rating": {"$avg": "$imdb.rating"}}},
    {"$sort": {"avg_rating": -1}},
    {"$limit": 5}
])
for director in top_directors:
    print(director)

# Task 3: total number of movies released per year sorted by year
movies_per_year = collection.aggregate([
    {"$group": {"_id": "$year", "total_movies": {"$sum": 1}}},
    {"$sort": {"_id": 1}}
])
for year in movies_per_year:
    print(year)
       
# EXERCISE 4

# Task 1: update IMDb rating of "The Godfather" to 9.5
collection.update_one({"title": "The Godfather"}, {"$set": {"imdb.rating": 9.5}})

# Task 2: update IMDb rating to 6.0 for all "Horror" movies where the rating is null
collection.update_many({"genres": "Horror", "imdb.rating": {"$exists": False}}, {"$set": {"imdb.rating": 6.0}})

# Task 3: delete all movies released before 1950
collection.delete_many({"year": {"$lt": 1950}})

# EXERCISE 5

# Task 1: text index and search for movies containing the word "love"
collection.create_index([("title", "text")])
love_movies = collection.find({"$text": {"$search": "love"}})
for movie in love_movies:
    print(movie)

#Task 2: movies containing "war" in the title or plot, sorted by IMDb rating
collection.create_index([("title", "text"), ("plot", "text")])
war_movies = collection.find({"$text": {"$search": "war"}}).sort("imdb.rating", -1).limit(5)
for movie in war_movies:
    print(movie)

# EXERCISE 6

#Task 1: Find "Action" movies with IMDb rating > 8, sorted by release year (descending):
action_high_rated_movies = collection.find({"genres": "Action", "imdb.rating": {"$gt": 8}}).sort("year", -1)
for movie in action_high_rated_movies:
    print(movie)

# Task 2: Find "Christopher Nolan" movies with IMDb rating > 8 (top 3):
nolan_movies = collection.find({"directors": "Christopher Nolan", "imdb.rating": {"$gt": 8}}).sort("imdb.rating", -1).limit(3)
for movie in nolan_movies:
    print(movie)
